<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[virgil's blog]]></title>
  <link href="http://leehong.github.com/atom.xml" rel="self"/>
  <link href="http://leehong.github.com/"/>
  <updated>2012-10-29T23:53:54+08:00</updated>
  <id>http://leehong.github.com/</id>
  <author>
    <name><![CDATA[leehong]]></name>
    <email><![CDATA[virgil.leehong@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntu更新]]></title>
    <link href="http://leehong.github.com/blog/2012/10/29/ubuntugeng-xin/"/>
    <updated>2012-10-29T08:55:00+08:00</updated>
    <id>http://leehong.github.com/blog/2012/10/29/ubuntugeng-xin</id>
    <content type="html"><![CDATA[<p>由于最近某党召开大会,导致于网速大降,在更新过程中不知道怎么就死掉了,然后出现了声音没了,再次更新提示dpkg 被中断，您必须手工sudo dpkg &#8211;configure -a 解决此问题,然后我就只好听话的sudo dpkg &#8211;configure -a 一下,结果在设置的过程中再次卡死,无赖,只有google了,然后大神就告诉我sudo  apt-get dist-upgrade,果然就搞定了.然后我郁闷了,为什么就会出现遮掩的情况呢?平时就都是upgrade就ok了么?这次怎么就挂掉了呢?原来apt-get upgrade源升级,会产生一些依赖,必须dis-upgrade来升级一下.</p>

<h3>顺便附上来源于ubuntu社区<a href="http://wiki.ubuntu.org.cn/Apt%E5%92%8Cdpkg%E5%BF%AB%E9%80%9F%E5%8F%82%E8%80%83">Apt和dpkg快速参考</a></h3>

<pre><code>  apt-cache search # ------(package 搜索包)
  apt-cache show #------(package 获取包的相关信息，如说明、大小、版本等)
  sudo apt-get install # ------(package 安装包)
  sudo apt-get install # -----(package - - reinstall 重新安装包)
  sudo apt-get -f install # -----(强制安装?#"-f =
  --fix-missing"当是修复安装吧...)
  sudo apt-get remove #-----(package 删除包)
  sudo apt-get remove - - purge # ------(package
  删除包，包括删除配置文件等)
  sudo apt-get autoremove --purge # ----(package
  删除包及其依赖的软件包+配置文件等（只对6.10有效，强烈推荐）)
  sudo apt-get update #------更新源
  sudo apt-get upgrade #------更新已安装的包
  sudo apt-get dist-upgrade # ---------升级系统
  sudo apt-get dselect-upgrade #------使用 dselect 升级
  apt-cache depends #-------(package 了解使用依赖)
  apt-cache rdepends # ------(package
  了解某个具体的依赖?#当是查看该包被哪些包依赖吧...)
  sudo apt-get build-dep # ------(package 安装相关的编译环境)
  apt-get source #------(package 下载该包的源代码)
  sudo apt-get clean &amp;&amp; sudo apt-get autoclean #
  --------清理下载文件的存档 &amp;&amp; 只清理过时的包
</code></pre>

<p>suapt-get install
下载 以及所有倚赖的包裹，同时进行包裹的安装或升级。如果某个包裹被设置了 hold (停止标志，就会被搁在一边(即不会被升级)。更多 hold 细节请看下面。</p>

<p>apt-get remove [&#8211;purge]
移除 以及任何倚赖这个包裹的其它包裹。
&#8211;purge 指明这个包裹应该被完全清除 (purged) ，更多信息请看 dpkg -P。</p>

<p>apt-get update
升级来自 Debian 镜像的包裹列表，如果你想安装当天的任何软件，至少每天运行一次，而且每次修改了
/etc/apt/sources.list 后，必须执行。</p>

<p>apt-get upgrade [-u]
升级所以已经安装的包裹为最新可用版本。不会安装新的或移除老的包裹。如果一个包改变了倚赖关系而需要安装一个新的包裹，那么它将不会被升级，而是标志为 hold。apt-get update 不会升级被标志为 hold 的包裹 (这个也就是 hold 的意思)。请看下文如何手动设置包裹为 hold。我建议同时使用 &#8216;-u&#8217; 选项，因为这样你就能看到哪些包裹将会被升级。</p>

<p>apt-get dist-upgrade [-u]
和 apt-get upgrade 类似，除了 dist-upgrade 会安装和移除包裹来满足倚赖关系。因此具有一定的危险性。</p>

<p>apt-cache search
搜索满足 的包裹和描述。</p>

<p>apt-cache show
显示 的完整的描述。</p>

<p>apt-cache showpkg
显示 许多细节，以及和其它包裹的关系。</p>

<p>dselect
console-apt
aptitude
gnome-apt
APT 的几个图形前端(其中一些在使用前得先安装)。这里 dselect 无疑是最强大的，也是最古老，最难驾驭。</p>

<p>普通 Dpkg 用法
dpkg -i
安装一个 Debian 包裹文件，如你手动下载的文件。</p>

<p>dpkg -c
列出 的内容。</p>

<p>dpkg -I
从 中提取包裹信息。</p>

<p>dpkg -r
移除一个已安装的包裹。</p>

<p>dpkg -P
完全清除一个已安装的包裹。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。</p>

<p>dpkg -L
列出 安装的所有文件清单。同时请看 dpkg -c 来检查一个 .deb 文件的内容。</p>

<p>dpkg -s
显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .deb 文件中提取的包裹信息。</p>

<p>dpkg-reconfigure
重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)。你能够重新配制 debconf 它本身，如你想改变它的前端或提问的优先权。例如，重新配制 debconf，使用一个 dialog 前端，简单运行：</p>

<p>dpkg-reconfigure &#8211;frontend=dialog debconf (如果你安装时选错了，这里可以改回来哟：)</p>

<p>echo &#8221; hold&#8221; | dpkg &#8211;set-selections
设置 的状态为 hlod (命令行方式)</p>

<p>dpkg &#8211;get-selections &#8220;&#8221;
取的 的当前状态 (命令行方式)</p>

<p>支持通配符，如：
Debian:~# dpkg &#8211;get-selections <em>wine</em>
libwine                                         hold
libwine-alsa                                    hold
libwine-arts                                    hold
libwine-dev                                     hold
libwine-nas                                     hold
libwine-print                                   hold
libwine-twain                                   hold
wine                                            hold
wine+                                           hold
wine-doc                                        hold
wine-utils                                      hold</p>

<p>例如：
大家现在用的都是 gaim-0.58 + QQ-plugin，为了防止 gaim 被升级，我们可以采用如下方法：</p>

<p>方法一：
Debian:~# echo &#8220;gaim hold&#8221; | dpkg &#8211;set-selections
然后用下面命令检查一下：
Debian:~# dpkg &#8211;get-selections &#8220;gaim&#8221;
gaim                                            hold
现在的状态标志是 hold，就不能被升级了。</p>

<p>如果想恢复怎么办呢?
Debian:~# echo &#8220;gaim install&#8221; | dpkg &#8211;set-selections
Debian:~# dpkg &#8211;get-selections &#8220;gaim&#8221;
gaim                                            install
这时状态标志又被重置为 install，可以继续升级了。</p>

<p>同志们会问，哪个这些状态标志都写在哪个文件中呢?
在 /var/lib/dpkg/status 里，你也可以通过修改这个文件实现 hold。</p>

<p>有时你会发现有的软件状态标志是 purge，不要奇怪。
如：事先已经安装了 amsn，然后把它卸了。
apt-get remove &#8211;purge amsn
那么状态标志就从 install 变成 purge。</p>

<p>方法二：
在/etc/apt 下手动建一个 preferences 文件
内容：
Package: gaim
Pin: version 0.58*
保存</p>

<p>dpkg -S
在包裹数据库中查找 ，并告诉你哪个包裹包含了这个文件。(注：查找的是事先已经安装的包裹)do apt-get check #&#8212;&#8212;-检查是否有损坏的依赖
  apt-get install
下载 以及所有倚赖的包裹，同时进行包裹的安装或升级。如果某个包裹被设置了 hold (停止标志，就会被搁在一边(即不会被升级)。更多 hold 细节请看下面。</p>

<p>apt-get remove [&#8211;purge]
移除 以及任何倚赖这个包裹的其它包裹。
&#8211;purge 指明这个包裹应该被完全清除 (purged) ，更多信息请看 dpkg -P。</p>

<p>apt-get update
升级来自 Debian 镜像的包裹列表，如果你想安装当天的任何软件，至少每天运行一次，而且每次修改了
/etc/apt/sources.list 后，必须执行。</p>

<p>apt-get upgrade [-u]
升级所以已经安装的包裹为最新可用版本。不会安装新的或移除老的包裹。如果一个包改变了倚赖关系而需要安装一个新的包裹，那么它将不会被升级，而是标志为 hold。apt-get update 不会升级被标志为 hold 的包裹 (这个也就是 hold 的意思)。请看下文如何手动设置包裹为 hold。我建议同时使用 &#8216;-u&#8217; 选项，因为这样你就能看到哪些包裹将会被升级。</p>

<p>apt-get dist-upgrade [-u]
和 apt-get upgrade 类似，除了 dist-upgrade 会安装和移除包裹来满足倚赖关系。因此具有一定的危险性。</p>

<p>apt-cache search
搜索满足 的包裹和描述。</p>

<p>apt-cache show
显示 的完整的描述。</p>

<p>apt-cache showpkg
显示 许多细节，以及和其它包裹的关系。</p>

<p>dselect
console-apt
aptitude
gnome-apt
APT 的几个图形前端(其中一些在使用前得先安装)。这里 dselect 无疑是最强大的，也是最古老，最难驾驭。</p>

<p>普通 Dpkg 用法
dpkg -i
安装一个 Debian 包裹文件，如你手动下载的文件。</p>

<p>dpkg -c
列出 的内容。</p>

<p>dpkg -I
从 中提取包裹信息。</p>

<p>dpkg -r
移除一个已安装的包裹。</p>

<p>dpkg -P
完全清除一个已安装的包裹。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。</p>

<p>dpkg -L
列出 安装的所有文件清单。同时请看 dpkg -c 来检查一个 .deb 文件的内容。</p>

<p>dpkg -s
显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .deb 文件中提取的包裹信息。</p>

<p>dpkg-reconfigure
重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)。你能够重新配制 debconf 它本身，如你想改变它的前端或提问的优先权。例如，重新配制 debconf，使用一个 dialog 前端，简单运行：</p>

<p>dpkg-reconfigure &#8211;frontend=dialog debconf (如果你安装时选错了，这里可以改回来哟：)</p>

<p>echo &#8221; hold&#8221; | dpkg &#8211;set-selections
设置 的状态为 hlod (命令行方式)</p>

<p>dpkg &#8211;get-selections &#8220;&#8221;
取的 的当前状态 (命令行方式)</p>

<p>支持通配符，如：
Debian:~# dpkg &#8211;get-selections <em>wine</em>
libwine                                         hold
libwine-alsa                                    hold
libwine-arts                                    hold
libwine-dev                                     hold
libwine-nas                                     hold
libwine-print                                   hold
libwine-twain                                   hold
wine                                            hold
wine+                                           hold
wine-doc                                        hold
wine-utils                                      hold</p>

<p>例如：
大家现在用的都是 gaim-0.58 + QQ-plugin，为了防止 gaim 被升级，我们可以采用如下方法：</p>

<p>方法一：
Debian:~# echo &#8220;gaim hold&#8221; | dpkg &#8211;set-selections
然后用下面命令检查一下：
Debian:~# dpkg &#8211;get-selections &#8220;gaim&#8221;
gaim                                            hold
现在的状态标志是 hold，就不能被升级了。</p>

<p>如果想恢复怎么办呢?
Debian:~# echo &#8220;gaim install&#8221; | dpkg &#8211;set-selections
Debian:~# dpkg &#8211;get-selections &#8220;gaim&#8221;
gaim                                            install
这时状态标志又被重置为 install，可以继续升级了。</p>

<p>同志们会问，哪个这些状态标志都写在哪个文件中呢?
在 /var/lib/dpkg/status 里，你也可以通过修改这个文件实现 hold。</p>

<p>有时你会发现有的软件状态标志是 purge，不要奇怪。
如：事先已经安装了 amsn，然后把它卸了。
apt-get remove &#8211;purge amsn
那么状态标志就从 install 变成 purge。</p>

<p>方法二：
在/etc/apt 下手动建一个 preferences 文件
内容：
Package: gaim
Pin: version 0.58*
保存</p>

<p>dpkg -S
在包裹数据库中查找 ，并告诉你哪个包裹包含了这个文件。(注：查找的是事先已经安装的包裹)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AdMaster复试]]></title>
    <link href="http://leehong.github.com/blog/2012/10/23/admasterfu-shi/"/>
    <updated>2012-10-23T08:50:00+08:00</updated>
    <id>http://leehong.github.com/blog/2012/10/23/admasterfu-shi</id>
    <content type="html"><![CDATA[<p>本来该上周一复试的,由于老爹生病了,回家看看.请求HR就到这周一了,很感谢能给我这个机会,面试我的是<a href="http://weibo.com/marscheng">程显峰</a>,北京anMaster的总裁.但我当时不知道,可能是有点紧张,更多的是注意问的问题.我觉得可能是我面试问的最好的.感觉不像是面试的,更多像指导.主要有下面几个问题,也是我很困扰的问题.</p>

<p>1.喜欢做什么.
2.该怎么去学习.
3.工作方式和环境.
4.最近看那些书.</p>

<p>对于第一条,还不是很明确;第二条,还需要不断的追寻;第三条,自由\开放\团结就可以了.希望能加入AdMaster.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby-china聚会]]></title>
    <link href="http://leehong.github.com/blog/2012/10/10/ruby-chinaju-hui/"/>
    <updated>2012-10-10T01:38:00+08:00</updated>
    <id>http://leehong.github.com/blog/2012/10/10/ruby-chinaju-hui</id>
    <content type="html"><![CDATA[<p>fsword来北京出差,建议大家聚聚聊聊,正好也没有什么事,就去凑个热闹,7点多我就直接从国家图书馆杀了过去,在一个小巷子里面,不太好找,幸好提前查了一下地图,去的时候还没有人到,我第一个,后来林生和xds2000到了,xds2000得知在redhat工作,小小的膜拜一下吧,也想某天能够进这样的外企感受一下,后来笑来老师带着他的助理到了,陆陆续续的人都来了,总共11个人吧.大家自我介绍,然后大家吃着羊肉,聊着天.</p>

<p>聊天的主题是怎么去学习,那些分享视频的让新手很容易的就开始学习,少走弯路,少掉进坑里,评论xds2000做的视频里英语发音不标准,以后的视频会好好的审查,这是一个难得的机会啊,笑来老师说的最多的就是怎么教好别人,因为他是一个老师,要做一件事就要做好.
这让我很感动,不想现在的很多老师,你学到知识学不到,不关我事,没有一点责任心.他的那种执着的精神值的学习,他也40岁,事业有成,按道理不用学习什么rails,没有什么多大的意义多很多人来说,但是他说他爱学习,他决定什么事都是自己动手自己干.很受启发,很希望能够拜在他的门下学习.</p>

<p>时间过的很快,不知不觉就到了10点半了,大家就撤了,郁闷的是我上的地铁是半程车,不能到北苑,郁闷至极.只有打车回去了,和一老外美女拼车,她听不懂英文,只说到西直门要多少钱,司机在那说70,比手势,但她不懂,他也为很贵,不坐,在司机的比划,然后问我多少钱,我用很我那仅有的口语跟她解释,终于上车,走人了,在车上她一股劲在骂 fucking china,很奇怪的是我差不多都听懂了,中途问了她是那的,她还打电话跟她朋友说遇到一个英语很不好的人,我伤心啊,感叹那时候没有好好的学&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于使用devise]]></title>
    <link href="http://leehong.github.com/blog/2012/10/09/guan-yu-shi-yong-devise/"/>
    <updated>2012-10-09T01:08:00+08:00</updated>
    <id>http://leehong.github.com/blog/2012/10/09/guan-yu-shi-yong-devise</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/plataformatec/devise">devise</a>是rails的一个gem,rails 的gem的好处就是各种便利,即使你不知道它的内在原理,你也可以很好的使用,只要你按照doc操作.关于devise的好处就不用说了,使用它之后不用不用在关心帐号的各种处理了,只要你按照它的步骤操作,一分钟就搞定了,给我们带来了很大的便利.</p>

<p>怎么使用devise就不详细说了,官方和现在的资料已经很仔细了,我要说的是这个方法after_sign_up_path_for ,这个方法里面你对制定的帐号登陆之后跳转的到指定的path,例如:</p>

<pre><code>  private 
  def after_sign_in_path_for(resource)
      这里进行处理
      if resource.is_a?(User)  
        这里指定的path
      else
        super
      end
  end
</code></pre>

<p>对应的登出也有这样的一个方法</p>

<pre><code>  private
  def after_sign_out_path_for(resource_or_scope)
      这里一般是跳到首页了
  end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux常用的8个命令]]></title>
    <link href="http://leehong.github.com/blog/2012/10/06/linuxchang-yong-de-8ge-ming-ling/"/>
    <updated>2012-10-06T23:36:00+08:00</updated>
    <id>http://leehong.github.com/blog/2012/10/06/linuxchang-yong-de-8ge-ming-ling</id>
    <content type="html"><![CDATA[<h3>来源:<a href="http://www.aqee.net/8-linux-commands-every-developer-should-know/">外刊IT评论网</a></h3>

<h3>英文来源:<a href="http://blog.jayfields.com/2012/08/8-linux-commands-every-developer-should.html">8 Linux Commands Every Developer Should Know</a></h3>

<hr />

<p>每个程序员，在职业生涯的某个时刻，总会发现自己需要知道一些Linux方面的知识。我并不是说你应该成为一个Linux专家，我的意思是，当面对linux命令行任务时，你应该能很熟练的完成。事实上，学会了下面8个命令，我基本上能完成任何需要完成的任务。</p>

<p>注意：下面的每个命令都有十分丰富的文档说明。这篇文章并不是来详尽的展示每个命令的各种功用的。我在这里要讲的是这几个最常用的命令的最常见用法。如果你对linux命令并不是很了解，你想找一些这方面的资料学习，那这篇文章将会给你一个基本的指导。
让我们从处理一些数据开始。假设我们有两个文件，分别记录的订单清单和订单处理结果。</p>

<pre><code>  order.out.log
  8:22:19 111, 1, Patterns of Enterprise Architecture, Kindle edition, 39.99
  8:23:45 112, 1, Joy of Clojure, Hardcover, 29.99
  8:24:19 113, -1, Patterns of Enterprise Architecture, Kindle edition, 39.99
  order.in.log
  8:22:20 111, Order Complete
  8:23:50 112, Order sent to fulfillment
  8:24:20 113, Refund sent to processing 
</code></pre>

<ul>
<li><h3>cat</h3></li>
</ul>


<p>cat – 连接文件，并输出结果</p>

<p>cat 命令非常的简单，你从下面的例子可以看到。</p>

<pre><code>      jfields$ cat order.out.log 
      8:22:19 111, 1, Patterns of Enterprise Architecture, Kindle edition, 39.99
      8:23:45 112, 1, Joy of Clojure, Hardcover, 29.99
      8:24:19 113, -1, Patterns of Enterprise Architecture, Kindle edition, 39.99  
</code></pre>

<p>就像它的说明描述的，你可以用它来连接多个文件。</p>

<pre><code>  fields$ cat order.* 
  8:22:20 111, Order Complete
  8:23:50 112, Order sent to fulfillment
  8:24:20 113, Refund sent to processing
  8:22:19 111, 1, Patterns of Enterprise Architecture, Kindle edition, 39.99
  8:23:45 112, 1, Joy of Clojure, Hardcover, 29.99
  8:24:19 113, -1, Patterns of Enterprise Architecture, Kindle edition, 39.99 
</code></pre>

<p>如果你想看这些log文件的内容，你可以把它们连接起来并输出到标准输出上，就是上面的例子展示的。这很有用，但输出的内容可以更有逻辑些。</p>

<ul>
<li><h3>sort</h3></li>
</ul>


<p>sort – 文件里的文字按行排序</p>

<p>此时sort命令显然是你最佳的选择。</p>

<pre><code>  jfields$ cat order.* | sort
  8:22:19 111, 1, Patterns of Enterprise Architecture, Kindle edition, 39.99
  8:22:20 111, Order Complete
  8:23:45 112, 1, Joy of Clojure, Hardcover, 29.99
  8:23:50 112, Order sent to fulfillment
  8:24:19 113, -1, Patterns of Enterprise Architecture, Kindle edition, 39.99
  8:24:20 113, Refund sent to processing`
</code></pre>

<p>就像上面例子显示的，文件里的数据已经经过排序。对于一些小文件，你可以读取整个文件来处理它们，然而，真正的log文件通常有大量的内容，你不能不考虑这个情况。此时你应该考虑过滤出某些内容，把cat、sort后的内容通过管道传递给过滤工具。</p>

<ul>
<li><h3>grep</h3></li>
</ul>


<p>grep, egrep, fgrep – 打印出匹配条件的文字行</p>

<p>假设我们只对Patterns of Enterprise Architecture这本书的订单感兴趣。使用grep，我们能限制只输出含有Patterns字符的订单。</p>

<pre><code>    jfields$ cat  order.* | sort |grep Patterns
    8:22:19 111, 1, Patterns of Enterprise Architecture, Kindle edition, 39.99
    8:24:19 113, -1, Patterns of Enterprise Architecture, Kindle edition, 39.99
</code></pre>

<p>假设退款订单113出了一些问题，你希望查看所有相关订单——你又需要使用grep了。</p>

<pre><code>  jfields$ cat order.*| sort | grep| ":\d\d 113, "
  8:24:19 113, -1, Patterns of Enterprise Architecture, Kindle edition, 39.99
  8:24:20 113, Refund sent to processing
</code></pre>

<p>  你会发现在grep上的匹配模式除了“113”外还有一些其它的东西。这是因为11 以匹配上书目或价格，加上额外的字符后，我们可以精确的搜索到我们想要的
  现在我们已经知道了退货的详细信息，我们还想知道日销售和退款总额。但我心Patterns of Enterprise Architecture这本书的信息，而且只关心数量和价现在要做到是切除我们不关心的任何信息。</p>

<ul>
<li><h3>cut</h3></li>
</ul>


<p>cut – 删除文件中字符行上的某些区域</p>

<p>又要使用grep，我们用grep过滤出我们想要的行。有了我们想要的行信息，我们就可以把它们切成小段，删除不需要的部分数据。</p>

<pre><code>  jfields$ cat order.* | sort | grep Patterns
  8:22:19 111, 1, Patterns of Enterprise Architecture, Kindle edition, 39.99
  8:24:19 113, -1, Patterns of Enterprise Architecture, Kindle edition, 39.99
   jfields$ cat order.* | sort | grep Patterns | cut -d"," -f2,51, 39.99
   -1, 39.99
</code></pre>

<p>  现在，我们把数据缩减为我们计算想要的形式，把这些数据粘贴到Excel里立刻就能得到结果了。
  cut是用来消减信息、简化任务的，但对于输出内容，我们通常会有更复杂的形式。假设我们还需要知道订单的ID，这样可以用来关联相关的其他信息。我们用cut可以获得ID信息，但我们希望把ID放到行的最后，用单引号包上。</p>

<ul>
<li><h3>sed</h3>

<p>sed – 一个流编辑器。它是用来在输入流上执行基本的文本变换。</p>

<p>下面的例子展示了如何用sed命令变换我们的文件行，之后我们在再用cut移除无用的信息</p>

<pre><code>jfields$ cat order.* | sort | grep Patterns \
| sed s/"[0-9\:]* \([0-9]*\)\, \(.*\)"/"\2, '\1'"/
1, Patterns of Enterprise Architecture, Kindle edition, 39.99, '111'
1, Patterns of Enterprise Architecture, Kindle edition, 39.99, '113'
l mp-jfields01:~ jfields$ cat order.* | sort | grep Patterns \
| sed s/"[0-9\:]* \([0-9]*\)\, \(.*\)"/"\2, '\1'"/ | cut -d"," -f1,4,5
1, 39.99, '111'
1, 39.99, '113'
</code></pre>

<p>我们对例子中使用的正则表达式多说几句，不过也没有什么复杂的。正则表达式做了下面几种事情</p>

<pre><code>1、 删除时间戳
2、 捕捉订单号
3、 删除订单号后的逗号和空格
4、 捕捉余下的行信息
</code></pre></li>
</ul>


<p>里面的引号和反斜杠有点乱，但使用命令行时必须要用到这些。
一旦捕捉到了我们想要的数据，我们可以使用 \1 &amp; \2 来存储它们，并把它们输出们想要的格式。我们还在其中加入了要求的单引号，为了保持格式统一，我们还加逗号。最后，用cut命令把不必要的数据删
现在我们有麻烦了。我们上面已经演示了如何把log文件消减成更简洁的订单形式我们的财务部门需要知道订单里一共有哪些书。</p>

<ul>
<li><h3>uniq</h3>

uniq – 删除重复的行
下面的例子展示了如何过滤出跟书相关的交易，删除不需要的信复的信息。

<pre><code>jfields$ cat order.out.log | grep "\(Kindle\|Hardcover\)" | cut -d"," -f3 | sort |      uniq -c     
   1  Joy      of Clojure     
   2  Patterns of Enterprise Architecture     
</code></pre></li>
</ul>


<p>看起来这是一个很简单的任务。
这都是很好用的命令，但前提是你要能找到你想要的文件。有时候你会发现一些文件藏在很深的文件夹里，你根本不知道它们在哪。但如果你是知道你要寻找的文件的名字的话，这对你就不是个问题了。</p>

<ul>
<li><h3>find</h3></li>
</ul>


<p>在上面的例子中我们处理了order.in.log和order.out.log这两个文件。这两个文件放在我的home目录里的。下面了例子将向大家展示如何在一个很深的目录结构里找到这样的文件。</p>

<pre><code>  jfields$ find /Users -name "order*"
  Users/jfields/order.in.log
  Users/jfields/order.out.log
</code></pre>

<p>find命令有很多其它的参数，但99%的时间里我只需要这一个就够了。
简单的一行，你就能找到你想要的文件，然后你可以用cat查看它，用c但文件很小时，你用管道把它们输出到屏幕上是可以的，但当文件大，你也许应该用管道把它们输出给less命令。</p>

<ul>
<li><h3>less</h3>

<p>less – 在文件里向前或向后移动</p>

<p>让我们再回到简单的 cat | sort 例子中来，下面的命令就是将经过合并、排序后的内容输出到less命令里。在 less 命令，使用“/”来执行向前搜索，使用“？”命令执行向后搜索。搜索条件是一个正则表达式</p>

<pre><code>jfields$ cat order* | sort | less
</code></pre></li>
</ul>


<p> 如果你在 less 命令里使用 /113.<em>，所有113订单的信息都会高亮。你也可</em>112，所有跟订单112相关的时间戳都会高亮。最后你可以用来退出le
 linux里有很丰富的各种命令，有些是很难用的。然而，学会了前面说的，你已经能处理大量的log分析任务了，完全不需要用脚本语言写程序来处理它们。</p>

<p> 06 Oct 2012 </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的新博客]]></title>
    <link href="http://leehong.github.com/blog/2012/10/01/wo-de-xin-bo-ke/"/>
    <updated>2012-10-01T20:14:00+08:00</updated>
    <id>http://leehong.github.com/blog/2012/10/01/wo-de-xin-bo-ke</id>
    <content type="html"><![CDATA[<p>新博客弄好了,之前用jekyll搭建的blog还是没有octopress强大啊,很感谢<a href="https://github.com/imathis">imathis</a>的贡献&#8230;</p>

<p>博客的主题是参考别人的设置的CSS的,具体大家可以google,没有什么难度,还有就是文章的分类,这个在plugins目录下的category_generate.rb修改,就是想里面的方法替换掉</p>

<pre><code>     def write_category_index(category_dir, category)
        index = CategoryIndex.new(self, self.source, category_dir, category)
        index.render(self.layouts, site_payload)
        index.write(self.dest)
        # Record the fact that this page has been added, otherwise Site::cleanup      will remove it.     
        self.pages &lt;&lt;      index    

          # Create an Atom-feed for each index.
          feed = CategoryFeed.new(self, self.source, category_dir, category)
          feed.render(self.layouts, site_payload)
          feed.write(self.dest)
          # Record the fact that this page has been added, otherwSite::cleanup      will remove it.
        self.pages &lt;&lt; feed
    end

  然后就是修改_config.yml配置文件,octopress官方文档说的很清楚了,然后就是豆瓣个人秀,去自己的豆瓣开发者个人中心,然后_include/asides目录下添加douban.html,然后在_config.yml的default_asides里面加入douban.html就ok了.其它的sides都按照这样的步骤.

  就这样博客就搭建好了,关于octopress的教材网上很多的,我就粗略的介绍一下 :)....
</code></pre>
]]></content>
  </entry>
  
</feed>
